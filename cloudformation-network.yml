AWSTemplateFormatVersion: 2010-09-09
Description: Template to build the Supply Order Management AWS Network Stack
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value:  !Join ["-", [!Ref "AWS::StackName", "VPC" ]]
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties:
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref "AWS::StackName","InternetGateway"]]
  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    # Notice how you can't attach an IGW to a VPC unless both are created:
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list       
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref "AWS::StackName","Public","Subnet","A"]]
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list 
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref "AWS::StackName","Public","Subnet","B"]]
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list 
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref "AWS::StackName","Private","Subnet","A"]]
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list 
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref "AWS::StackName","Private","Subnet","B"]]

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref "AWS::StackName","RouteTable", "Public"]]
  PublicRoute1:   # Public route table has direct routing to IGW
    Type: AWS::EC2::Route
    DependsOn: AttachInternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway  

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref "AWS::StackName","RouteTable", "Private"]]
  PrivateRoute1:            # Private route table can access web via NAT (created below)
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref "AWS::StackName","NAT","Gateway"]]
  ElasticIPAddress:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC      

  # Attach the public subnets to public route tables,
  # and attach the private subnets to private route tables:   
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable     
  
  PublicLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref "AWS::StackName","ALB","SecurityGroup"]]
  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      SecurityGroups: [!Ref "PublicLoadBalancerSecurityGroup"]
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref "AWS::StackName","ALB"]]
  DummyTargetGroupPublic:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckIntervalSeconds: 6
        HealthCheckPath: /
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 5
        HealthyThresholdCount: 2
        Name: "no-op"
        Port: 80
        Protocol: HTTP
        UnhealthyThresholdCount: 2
        VpcId: !Ref 'VPC'
        Tags:
          - Key: Name
            Value:  !Join ["-", [!Ref "AWS::StackName", "Dummy", "TG" ]]
  PublicLoadBalancerListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      DependsOn:
        - PublicLoadBalancer
      Properties:
        DefaultActions:
          - TargetGroupArn: !Ref "DummyTargetGroupPublic"
            Type: "forward"
        LoadBalancerArn: !Ref 'PublicLoadBalancer'
        Port: 80
        Protocol: HTTP
  
  FargateRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:AttachNetworkInterface'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:CreateNetworkInterfacePermission'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:DeleteNetworkInterfacePermission'
                  - 'ec2:Describe*'
                  - 'ec2:DetachNetworkInterface'
                  - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
                  - 'elasticloadbalancing:DeregisterTargets'
                  - 'elasticloadbalancing:Describe*'
                  - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
                  - 'elasticloadbalancing:RegisterTargets'
                Resource: '*'

  FargateTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
        
  FargateCluster:
    Type: AWS::ECS::Cluster
    Properties: 
      ClusterName: !Join ["-", [!Ref "AWS::StackName","Cluster"]]
      Tags:
        - Key: Name
          Value:  !Join ["-", [!Ref "AWS::StackName", "FargateCluster" ]]

  FargateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Fargate containers
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value:  !Join ["-", [!Ref "AWS::StackName", "FargateCluster", "SG" ]]

  FargateSecurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: !Ref 'FargateSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'PublicLoadBalancerSecurityGroup'

  FargateSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref 'FargateSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'FargateSecurityGroup'  

  FargateSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties: 
      Description: Egress to allow ECS (in private subnet) to access ECR
      GroupId: !Ref 'FargateSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'FargateSecurityGroup'  

Outputs:
  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref 'FargateCluster'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ClusterName' ] ]
  ExternalUrl:
    Description: The url of the external load balancer
    Value: !Join ['', ['http://', !GetAtt 'PublicLoadBalancer.DNSName']]
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ExternalUrl' ] ]
  # ECSRole:
  #   Description: The ARN of the ECS role
  #   Value: !GetAtt 'ECSRole.Arn'
  #   Export:
  #     Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ECSRole' ] ]
  FargateTaskExecutionRoleArn:
    Description: The ARN of the ECS role
    Value: !GetAtt 'FargateTaskExecutionRole.Arn'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'FargateTaskExecutionRoleArn' ] ]
  PublicListener:
    Description: The ARN of the public load balancer's Listener
    Value: !Ref PublicLoadBalancerListener
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicListener' ] ]
  VPCId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref 'VPC'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'VPCId' ] ]
  PublicSubnetA:
    Description: Public Subnet A
    Value: !Ref 'PublicSubnetA'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnetA' ] ]
  PublicSubnetB:
    Description: Public Subnet B
    Value: !Ref 'PublicSubnetB'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnetB' ] ]
  PrivateSubnetA:
    Description: Private Subnet A
    Value: !Ref 'PrivateSubnetA'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PrivateSubnetA' ] ]
  PrivateSubnetB:
    Description: Private Subnet B
    Value: !Ref 'PrivateSubnetB'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PrivateSubnetB' ] ]
  FargateSecurityGroup:
    Description: A security group used to allow ECS containers to receive traffic
    Value: !Ref 'FargateSecurityGroup'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'FargateSecurityGroup' ] ]
